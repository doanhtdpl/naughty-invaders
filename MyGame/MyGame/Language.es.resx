<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="backToMap" xml:space="preserve">
    <value>Back to map</value>
  </data>
  <data name="BuyGame" xml:space="preserve">
    <value>::X Buy for 200ms points!</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="continueGame" xml:space="preserve">
    <value>Continue game</value>
  </data>
  <data name="Credits" xml:space="preserve">
    <value>Credits</value>
  </data>
  <data name="CreditsDesc" xml:space="preserve">
    <value>Wanna see who made this game?</value>
  </data>
  <data name="DialogBossMacedoniaIntro1" xml:space="preserve">
    <value>This time you are the annoying problem. I'm tired of useful wishes...</value>
  </data>
  <data name="DialogBossMacedoniaIntro2" xml:space="preserve">
    <value>Why are all of you trying to kill me?</value>
  </data>
  <data name="DialogBossMacedoniaIntro3" xml:space="preserve">
    <value>Enough talk. My favourite TV show is starting in a few minutes so im gonna defeat you fast</value>
  </data>
  <data name="DialogBossMacedoniaOutro1" xml:space="preserve">
    <value>How is it possible? Are you a real wish? I need to think about it...</value>
  </data>
  <data name="DialogBossMacedoniaOutro2" xml:space="preserve">
    <value>Mmm... maybe. I don't know exactly who I am.</value>
  </data>
  <data name="DialogBossMacedoniaOutro3" xml:space="preserve">
    <value>Wow! Listen, now I'm gonna watch the TV show. Wanna join me?</value>
  </data>
  <data name="DialogDarkWish1" xml:space="preserve">
    <value>...! You must be...</value>
  </data>
  <data name="DialogDarkWish2" xml:space="preserve">
    <value>Where am I? Who am I? Who are you? Why so much colors?</value>
  </data>
  <data name="DialogDarkWish3" xml:space="preserve">
    <value>Hey! You must be Wish! You're someone's creation. Now, escape from this bottle!</value>
  </data>
  <data name="DialogDarkWish4" xml:space="preserve">
    <value>Which bottle?</value>
  </data>
  <data name="DialogDarkWish5" xml:space="preserve">
    <value>No time, this is dangerous. Your mission is to escape in order fulfill yourself.</value>
  </data>
  <data name="DialogDarkWish6" xml:space="preserve">
    <value>I don't understand but... what can I do?</value>
  </data>
  <data name="DialogDarkWish7" xml:space="preserve">
    <value>You can move with ::LS and shot with ::X . That's all you need by now.</value>
  </data>
  <data name="DialogDarkWish8" xml:space="preserve">
    <value>Look! they are coming, try to pick up as many orbs as you can!</value>
  </data>
  <data name="DialogDarkWishRemind1" xml:space="preserve">
    <value>Remember, you can move with ::LS and shot with ::X . That's all you need by now.</value>
  </data>
  <data name="DialogDarkWishRemind2" xml:space="preserve">
    <value>Look! they are coming, try to pick up as many orbs as you can!</value>
  </data>
  <data name="DialogEpilepticBad1" xml:space="preserve">
    <value>Too bad Wish... there are more fruits on the floor that in my head. Can you help me get'em?</value>
  </data>
  <data name="DialogEpilepticBad2" xml:space="preserve">
    <value>... emm do you hear that. Someone's is looking for me?</value>
  </data>
  <data name="DialogEpilepticBad3" xml:space="preserve">
    <value>I didn't . . . . . . . . . . . . . grmf!</value>
  </data>
  <data name="DialogEpilepticBadSpecial" xml:space="preserve">
    <value>Wish! if you can hear me, buy the dash skill pressing ::BACK</value>
  </data>
  <data name="DialogEpilepticGood1" xml:space="preserve">
    <value>Amazing! How can you move so fast? Incredible!</value>
  </data>
  <data name="DialogEpilepticGood2" xml:space="preserve">
    <value>Thanks Macedonia, you are so kind.</value>
  </data>
  <data name="DialogEpilepticGoodSpecial" xml:space="preserve">
    <value>Maybe, with the orbs you won you can buy the dash skill ::BACK</value>
  </data>
  <data name="DialogEpilepticIntro1" xml:space="preserve">
    <value>Hi Macedonia, how are you doing?</value>
  </data>
  <data name="DialogEpilepticIntro2" xml:space="preserve">
    <value>Hi Wish, Im watching the greatest TV show of all time. But I need your help!</value>
  </data>
  <data name="DialogEpilepticIntro3" xml:space="preserve">
    <value>Ok, what do you need?</value>
  </data>
  <data name="DialogEpilepticIntro4" xml:space="preserve">
    <value>That TV show is so amazing that Ihave some minor epileptic attacks, and my fruits fall.</value>
  </data>
  <data name="DialogEpilepticIntro5" xml:space="preserve">
    <value>I got it, I will pick as many as I can!</value>
  </data>
  <data name="DialogEpilepticIntro6" xml:space="preserve">
    <value>Oh, it's coming!!!</value>
  </data>
  <data name="DialogEpilepticMedium1" xml:space="preserve">
    <value>Not bad. With those fruits we can still make some high quality juice!</value>
  </data>
  <data name="DialogEpilepticMedium2" xml:space="preserve">
    <value>Do you like juice? Isn't that some kind of cannibalism?</value>
  </data>
  <data name="DialogEpilepticMedium3" xml:space="preserve">
    <value>Yeah but all people say to eat fruit so I do. You know.</value>
  </data>
  <data name="DialogEpilepticMediumSpecial" xml:space="preserve">
    <value>By the way, improve your skills learning dash. Check out the skills menu ::BACK</value>
  </data>
  <data name="DialogLearnDash" xml:space="preserve">
    <value>You'd better learn the dash move as soon as possible. Open the skills menu ::BACK</value>
  </data>
  <data name="DialogOnionIntro1" xml:space="preserve">
    <value>Hi onion elder! I need to go to Cucumber Valley!</value>
  </data>
  <data name="DialogOnionIntro2" xml:space="preserve">
    <value>Hey boy, its right there. But king tomato and his troops are trying to invade us!</value>
  </data>
  <data name="DialogOnionIntro3" xml:space="preserve">
    <value>I will help you onion people. What can I do?</value>
  </data>
  <data name="DialogOnionIntro4" xml:space="preserve">
    <value>Great! We can help you with our legendary weapon: the Garlic Gun!</value>
  </data>
  <data name="DialogOnionIntro5" xml:space="preserve">
    <value>Wow! it seems very powerful!</value>
  </data>
  <data name="DialogOnionIntro6" xml:space="preserve">
    <value>Press ::RS to shot in any direction! Stay alert, they are coming!</value>
  </data>
  <data name="DialogTomatoAttack1" xml:space="preserve">
    <value>Cowards, I don't need you! Now you will see the real power of King Tomato's speech!</value>
  </data>
  <data name="DialogTomatoComes1" xml:space="preserve">
    <value>Out of my way! I want to eat some young onions!</value>
  </data>
  <data name="DialogTomatoComes2" xml:space="preserve">
    <value>No way! you are a red dead tomato!</value>
  </data>
  <data name="DialogTomatoComes3" xml:space="preserve">
    <value>What!!!!11!!!1! Insolent, you will die! C'mon tomatoes!!!</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ExitDesc" xml:space="preserve">
    <value>Back to Community Games</value>
  </data>
  <data name="gamePaused" xml:space="preserve">
    <value>Game paused</value>
  </data>
  <data name="MessageNewSkills" xml:space="preserve">
    <value>buy new skills! press ::BACK</value>
  </data>
  <data name="NewGame" xml:space="preserve">
    <value>New game</value>
  </data>
  <data name="NewGameDesc" xml:space="preserve">
    <value>Start a new game</value>
  </data>
  <data name="OptBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="OptBackDesc" xml:space="preserve">
    <value>Back to main menu</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="OptionsDesc" xml:space="preserve">
    <value>Configure options</value>
  </data>
  <data name="OptMusicVol" xml:space="preserve">
    <value>Music volume</value>
  </data>
  <data name="OptMusicVolDesc" xml:space="preserve">
    <value>Adjust the music volume</value>
  </data>
  <data name="OptNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OptNoDesc" xml:space="preserve">
    <value>Nope, I want to save energy</value>
  </data>
  <data name="OptRumble" xml:space="preserve">
    <value>Rumble</value>
  </data>
  <data name="OptRumbleDesc" xml:space="preserve">
    <value>Do u wanna rumble?</value>
  </data>
  <data name="OptSoundVol" xml:space="preserve">
    <value>Sound volume</value>
  </data>
  <data name="OptSoundVolDesc" xml:space="preserve">
    <value>Configure the sound volume</value>
  </data>
  <data name="OptYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="OptYesDesc" xml:space="preserve">
    <value>Sure!</value>
  </data>
  <data name="Pause" xml:space="preserve">
    <value>Paused game</value>
  </data>
  <data name="pressAenterLevel" xml:space="preserve">
    <value>::A enter level</value>
  </data>
  <data name="PressAToStart" xml:space="preserve">
    <value>Press ::A to start</value>
  </data>
  <data name="pressBACKskillsMenu" xml:space="preserve">
    <value>::BACK skills menu</value>
  </data>
  <data name="pressBBack" xml:space="preserve">
    <value>::BACK</value>
  </data>
  <data name="pressBBackMenu" xml:space="preserve">
    <value>::B back to menu</value>
  </data>
  <data name="pressBBackToGame" xml:space="preserve">
    <value>::B back to game</value>
  </data>
  <data name="PressBToMenu" xml:space="preserve">
    <value>Press ::B to go to menu</value>
  </data>
  <data name="pressLSselectLevel" xml:space="preserve">
    <value>::LS select level</value>
  </data>
  <data name="PressStartToCont" xml:space="preserve">
    <value>Press ::START to continue</value>
  </data>
  <data name="Scores" xml:space="preserve">
    <value>Awards</value>
  </data>
  <data name="ScoresDesc" xml:space="preserve">
    <value>See what imaginary awards you have</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="skillDash" xml:space="preserve">
    <value>Dash</value>
  </data>
  <data name="skillLife" xml:space="preserve">
    <value>Life ++</value>
  </data>
  <data name="skillPlasma" xml:space="preserve">
    <value>Plasma</value>
  </data>
  <data name="skillPowerShot" xml:space="preserve">
    <value>Power Shot</value>
  </data>
  <data name="skills" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="Thanks" xml:space="preserve">
    <value>Thanks text</value>
  </data>
  <data name="Trial" xml:space="preserve">
    <value>Trial text</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
</root>